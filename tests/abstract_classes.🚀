abstract class Shape
  abstract def area()
  abstract def perimeter()
end

class Circle < Shape
  def initialize(radius)
    @radius = radius
  end

  override def area()
    return 3.14159 * radius * radius
  end

  override def perimeter()
    return 2 * 3.14159 * radius
  end
end

try
  # This will result in an error:
  #shape = Shape.new() # Throws InvalidOperationError: Cannot instantiate an abstract class.

  # Correct way to instantiate:
  circle = Circle.new(5)
  println circle.area()  # Output: Area of the circle.
  println circle.perimeter()  # Output: Perimeter of the circle.
catch (error)
  println "An error occurred: ${error}"
end

println ""