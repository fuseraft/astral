#!/usr/bin/astral
/# This ‚≠ê script is for experimentation. #/

abstract class X
  abstract def run(x)
end

class A < X
  def initialize() end
  override def run(x) println("A: ${x}") end
end

class B < X
  def initialize() end
  override def run(x) println("B: ${x}") end
end

class C < X
  def initialize() end
  override def run(x) println("C: ${x}") end
end

class D
  def initialize() end
  def run(x) println("D: ${x}") end
end

# Testing deeply nested conditions.
[A.new(), B.new(), C.new(), D.new()].each(with (o) do
  if o.is_a(A)
    if !true
      println("This will not happen.")
    else
      o.run("I am an A")
    end
  elsif o.is_a(C) || o.is_a(B)
    if o.is_a(C)
      o.run("I am a C")
    else
      if o.is_a(B)
        o.run("I am a B.")
      else
        println("This will not happen.")
      end
    end
  else
    if o.is_a(X)
      o.run("I am an X")
    else
      o.run("I am something else.")
    end
  end
end)

/# Output:
A: I am an A
B: I am a C, or a B.
C: I am a C, or a B.
D: I am something else.
#/

for i in [0 .. 9] do
  if i % 2 == 0    println("${i} foo")
  elsif i % 3 == 0 println("${i} bar")
  elsif i % 5 == 0 println("${i} baz")
  elsif i % 7 == 0 println("${i} qux")
  else             println("${i} quux") end
end