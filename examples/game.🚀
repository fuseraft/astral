import "@astral/math" as Math
import "@astral/sys" as sys

def main()
  g = Game.new("Cosmognorivelum", 2)
  name = input("Enter player name: ")

  g.add_player(Player.create(name))
  g.add_player(Player.create_enemy("aetheris"))

  g.print_info()

  g.play()
end

class Player
  def initialize(config = { "name": "", "is_enemy": "" })
    this.name = config.name
    this.is_enemy = config.is_enemy
  end

  def to_string()
    return this.name
  end

  def get_type()
    return this.is_enemy ? "Enemy" : "Player"
  end

  static def create(name, is_enemy = false)
    return Player.new({ "name": name, "is_enemy": is_enemy })
  end

  static def create_enemy(name)
    return Player.create(name, true)
  end
end

class Game private (name, players, player_count, turns)
  def initialize
    ( name, 
      player_count,
      turns = 6 )

    this.name = name
    this.player_count = player_count
    this.players = []
    this.turns = turns
  end
  
  def to_string()
    return "${this.name}"
  end

  def add_player
    ( player )

    if this.player_count == this.players.size()
      println "max player capacity is already met."
      return 0
    end

    this.players << player
  end

  def get_players()
    return this.players
  end

  def get_name()
    return this.name
  end

  def print_info()  
    lines = "=====================" + ("=" * "${this}".size())
    println "\n${lines}\nYou are now playing ${this}!\n${lines}"
    
    for p, i in this.get_players() do
      print "${p.get_type()}: ${p}" + ((i + 1 < this.get_players().size()) ? ", " : "\n")
    end
  end

  def play()
    player_hp = 100
    enemy_hp = 100

    for turn in [1..this.turns] do
      sys.exec("clear")
      
      this.print_info()
      println "\nTurn ${turn} of ${this.turns} => Player HP: ${player_hp}, Enemy HP: ${enemy_hp}\n"
      
      for p in this.get_players() do
        if !p.is_enemy
          move = get_action(p)
          
          player_attack = move == "attack"
          enemy_attack = Math.random(1, 100) >= 20

          resolve_combat(player_attack, enemy_attack, player_hp, enemy_hp)
        end
      end
    end

    this.conclude_game(player_hp, enemy_hp)
  end

  private def conclude_game(player_hp, enemy_hp)
    sys.exec("clear")
    println "Results => Player HP: ${player_hp}, Enemy HP: ${enemy_hp}\n"

    if player_hp > enemy_hp
      println "Winner winner chicken dinner!"
    else
      println "Game over."
    end
  end

  private def resolve_combat(player_attack, enemy_attack, player_hp, enemy_hp)
    if enemy_attack && player_attack
      player_hp -= Math.random(0, 30)
      enemy_hp -= Math.random(0, 25)
    elsif enemy_attack && !player_attack && Math.random(1, 6) == 6
      player_hp -= Math.random(0, 15)
    elsif !enemy_attack && player_attack
      enemy_hp -= Math.random(0, 10)
    end
  end

  private def get_action(p)
    action = ""

    while !["a", "b"].contains(action) do
      action = input("${p} will (a)ttack or (b)lock: ")
    end

    println ""

    return action == "a" ? "attack" : "block"
  end
end

main()