module linkedlist
  __home__("examples")

  def clear(_ll)
    _ll.head = {}
  end
  
  def create()
    return { "head": {} }
  end
  
  def create_node(_data, _next_node = {})
    return { "data": _data, "next_node": _next_node }
  end
  
  def get_at(_ll, _index)
    _counter = 0
    _node = _ll.head
  
    _ret_node = {}
  
    while !_node.empty() do
      if _counter == _index
        _ret_node = _node
      end
      
      _counter += 1
      _node = _node.next_node
    end
  
    return _ret_node
  end
  
  def get_first(_ll)
    return _ll.head
  end
  
  def get_last(_ll)
    if _ll.head.empty()
      return {}
    end
  
    _node = _ll.head
    _ret_node = {}
  
    while !_node.empty() do
      _next_node = _node.next_node

      if _next_node.empty()
        _ret_node = _node
        break
      end
      
      _node = _next_node
    end
  
    return _ret_node
  end

  def get_values(_ll)
    _values = []
    _node = _ll.head
    
    while !_node.empty() do
      _values << _node.data
      _node = _node.next_node
    end

    return _values
  end
  
  def insert_at(_ll, _data, _index)
    if _ll.head.empty() || _index == 0
      _ll.head = linkedlist::create_node(_data, _ll.head)
    else
      _previous = linkedlist::get_at(_ll, _index - 1)

      if _previous.empty()
        _previous = linkedlist::get_last(_ll)
        _previous.next_node = linkedlist::create_node(_data, _previous.next_node)
      end
    end
  end
  
  def insert_first(_ll, _data)
    _ll.head = linkedlist::create_node(_data, _ll.head)
  end
  
  def insert_last(_ll, _data)
    _last = linkedlist::get_last(_ll)

    if !_last.empty()
      _last.next_node = linkedlist::create_node(_data)
    else
      _ll.head = linkedlist::create_node(_data)
    end
  end
  
  def print(_ll)
    _node = _ll.head

    while !_node.empty() do
      println _node.data
      _node = _node.next_node
    end
  end
  
  def remove_at(_ll, _index)
    if !_ll.empty()
      if _index == 0
        _next_node = _ll.head.next_node
        _ll.head = _next_node
      else
        _previous = linkedlist::get_at(_ll, _index - 1)
  
        if !_previous.empty() && !_previous.next_node.empty()
          _previous.next_node = _previous.next_node.next_node
        end
      end
    end
  end
  
  def remove_first(_ll)
    if !_ll.head.empty()
      _ll.head = _ll.head.next_node
    end
  end
  
  def remove_last(_ll)
    if !_ll.head.empty()
      if _ll.head.next_node.empty()
        _ll.head = {}
      else
        _previous = _ll.head
        _node = _ll.head.next_node
    
        while !_node.next_node.empty() do
          _previous = _node
          _node = _node.next_node
        end
  
        _previous.next_node = {}
      end
    end
  end

  def size_of(_ll)
    _ll_size = 0
    _node = _ll.head
  
    while !_node.empty() do
      _ll_size += 1
      _node = _node.next_node
    end
  
    return _ll_size
  end
end

export "linkedlist"