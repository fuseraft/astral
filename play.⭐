#!/usr/bin/astral
/# This ‚≠ê script is for experimentation. #/

abstract class X
  abstract def run(x)
end

class A < X
  def initialize() end
  override def run(x) println("A: ${x}") end
end

class B < X
  def initialize() end
  override def run(x) println("B: ${x}") end
end

class C < X
  def initialize() end
  override def run(x) println("C: ${x}") end
end

class D
  def initialize() end
  def run(x) println("D: ${x}") end
end

class E < X
  def initialize() end
  override def run(x) println("E: ${x}") end
end

# Testing deeply nested conditions.
[A.new(), B.new(), C.new(), D.new(), E.new()].each(with (o) do
  if o.is_a(A)
    if !true
      println("This will not happen.")
    else
      o.run("I am a ${o.type()}.")
    end
  elsif o.is_a(C) || o.is_a(B)
    if o.is_a(C)
      o.run("I am a ${o.type()}.")
    else
      if o.is_a(B)
        o.run("I am a ${o.type()}.")
      else
        println("This will not happen.")
      end
    end
  else
    if !o.is_a(X)
      o.run("I am something else.")
    else
      o.run("I am a ${o.type()}.")
    end
  end
end)

/# Output:
A: I am a A.
B: I am a B.
C: I am a C.
D: I am something else.
E: I am a E.
#/